name: 'Demo API'

trigger:
- main




variables:
  vmImageName: ubuntu-latest

  pathToProject: '**/src/Demo.Api/*.csproj'
  pathToTestProjects: '**/*Tests/*Tests.csproj'

  buildTag: '$(Build.BuildId)'
  pathDockerFile: './Dockerfile'
  dockerImageName: 'technobre/demo-api-azure-pipeline-task-cache'

  cacheNugetKey: 'nuget | "$(Agent.OS)" | **/packages.lock.json'
  cacheNugetPath: $(Pipeline.Workspace)/.nuget/packages
  cacheNugetRestored: false

  cacheDockerKey: 'docker | "$(Agent.OS)" | $(pathDockerFile)'
  cacheDockerPath: $(Pipeline.Workspace)/docker
  cacheDockerFile: cache.tar
  cacheDockerRestored: false



stages:

- stage: TestProject
  displayName: 'Test stage'
  jobs:
  - job:
    displayName: 'Tests'
    pool:
      vmImage: $(vmImageName)
    steps:

    - task: UseDotNet@2
      displayName: 'Install .NET SDK for project'
      inputs:
        packageType: 'sdk'
        useGlobalJson: true

    - task: Cache@2
      displayName: 'Restore NuGet packages from cache'
      inputs:
        key: $(cacheNugetKey)
        restoreKeys: |
          nuget | "$(Agent.OS)"
          nuget
        path: $(cacheNugetPath)
        cacheHitVar: cacheNugetRestored

    - script: |
        echo "NuGet cache restored: $(cacheNugetRestored)"
      displayName: 'DEBUG - Show NuGet cache status'

    - task: DotNetCoreCLI@2
      displayName: 'Restore dependecies'
#      condition: eq(variables.cacheNugetRestored, false)
      inputs:
        command: 'restore'
        arguments: '--locked-mode'
        projects: '**/**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Running unit tests'
      inputs:
        command: test
        projects: $(pathToTestProjects)



- stage: BuildProject
  dependsOn: TestProject
  displayName: 'Build stage'
  jobs:
  - job: Build
    pool:
      vmImage: $(vmImageName)
    steps:

    - task: UseDotNet@2
      displayName: 'Install .NET SDK for project'
      inputs:
        packageType: 'sdk'
        useGlobalJson: true

    - task: Cache@2
      displayName: 'Restore NuGet packages from cache'
      inputs:
        key: $(cacheNugetKey)
        restoreKeys: |
          nuget | "$(Agent.OS)"
          nuget
        path: $(cacheNugetPath)
        cacheHitVar: cacheNugetRestored

    - task: DotNetCoreCLI@2
      displayName: 'Restore dependecies'
#      condition: eq(variables.cacheNugetRestored, false)
      inputs:
        command: 'restore'
        arguments: '--locked-mode'
        projects: '**/**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build project'
      inputs:
        command: 'build'
        projects: '$(pathToProject)'
        arguments: '--configuration Release'

    - task: DotNetCoreCLI@2
      displayName: 'Publish Api'
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration Release --no-build --no-restore'
        zipAfterPublish: false
        modifyOutputPath: false


    - task: Cache@2
      displayName: 'Restore Dockerfile cache from cache'
      inputs:
        key: $(cacheDockerKey)
        restoreKeys: |
          docker | "$(Agent.OS)"
          docker
        path: $(cacheDockerPath)
        cacheHitVar: cacheDockerRestored

    - script: |
        echo "Docker cache restored: $(cacheDockerRestored)"
      displayName: 'DEBUG - Show Docker cache status'

    - script: |
        docker load -i $(Pipeline.Workspace)/docker/$(cacheDockerFile)
      condition: and(not(canceled()), eq(variables.cacheDockerRestored, true))
      displayName: Docker restore

    - task: Docker@2
      displayName: 'Building Docker image'
      inputs:
        command: build
        repository: $(dockerImageName)
        dockerfile: '$(pathDockerFile)'
        tags: |
            $(buildTag)
            latest

    - script: |
        mkdir -p $(cacheDockerPath)
        docker save -o $(cacheDockerPath)/$(cacheDockerFile) $(dockerImageName):$(buildTag)
      displayName: 'Docker save image to cache'
      condition: and(not(canceled()), or(failed(), ne(variables.cacheDockerRestored, true)))
